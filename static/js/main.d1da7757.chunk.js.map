{"version":3,"sources":["components/card-list/card-list.component.jsx","components/card/card.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["CardList","props","className","children","Card","src","monster","id","alt","name","email","SearchBox","placeholder","handleChange","type","onChange","App","state","monsters","searchField","fetch","then","res","json","users","setState","this","filterMonsters","filter","toLowerCase","includes","a","target","value","re","map","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAIaA,EAAW,SAACC,GAErB,OAAS,qBAAKC,UAAU,YAAf,SAA4BD,EAAME,YCHlCC,G,MAAO,SAACH,GACjB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKG,IAAG,+BAA0BJ,EAAMK,QAAQC,GAAxC,aAAuDC,IAAI,KACnE,6BAAKP,EAAMK,QAAQG,OACnB,4BAAIR,EAAMK,QAAQI,aCLjBC,G,MAAY,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aACpC,OACI,qBAAKX,UAAU,aAAf,SACI,uBACIY,KAAK,SACLF,YAAY,iBACZG,SAAUF,QCsCXG,E,kDAxCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,SAAU,GACVC,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBC,MAAM,8CACDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEP,SAAUM,S,oBAGnD,WAAU,IAAD,SAC6BE,KAAKT,MAA/BC,EADH,EACGA,SAAUC,EADb,EACaA,YACZQ,EAAiBT,EAASU,QAAO,SAACtB,GAAD,OACnCA,EAAQG,KAAKoB,cAAcC,SAASX,EAAYU,kBAEpD,OACI,sBAAK3B,UAAU,MAAf,UACI,iDACA,cAAC,EAAD,CACIW,aAAc,SAACkB,GACX,EAAKN,SACD,CAAEN,YAAaY,EAAEC,OAAOC,QACxB,SAACC,UAIb,cAAC,EAAD,CAAUzB,KAAK,MAAf,SACKkB,EAAeQ,KAAI,SAAC7B,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,gB,GAjCzB6B,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d1da7757.chunk.js","sourcesContent":["import React from 'react'\n\nimport './card-list.css'\n\nexport const CardList = (props)=> {\n\n    return ( <div className=\"card-list\">{props.children}</div> )\n}","import React from 'react'\nimport './card.css'\n\nexport const Card = (props) => {\n    return (\n        <div className=\"card-container\">\n            <img src={`https://robohash.org/${props.monster.id}?set=set2`} alt=\"\"/>\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport './search-box.css'\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return (\n        <div className=\"search-box\">\n            <input \n                type=\"search\"\n                placeholder=\"Search Monster\"\n                onChange={handleChange}\n            />\n        </div>\n    )\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { Card } from \"./components/card/card\";\nimport { SearchBox } from \"./components/search-box/search-box\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            monsters: [],\n            searchField: \"\",\n        };\n    }\n\n    componentDidMount() {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then((res) => res.json())\n            .then((users) => this.setState({ monsters: users }));\n    }\n\n    render() {\n        const { monsters, searchField } = this.state;\n        const filterMonsters = monsters.filter((monster) =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\n        );\n        return (\n            <div className=\"App\">\n                <h1>Monster Rolodex</h1>\n                <SearchBox\n                    handleChange={(a) => {\n                        this.setState(\n                            { searchField: a.target.value },\n                            (re) => {}\n                        );\n                    }}\n                />\n                <CardList name=\"Kox\">\n                    {filterMonsters.map((monster) => (\n                        <Card key={monster.id} monster={monster} />\n                    ))}\n                </CardList>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}